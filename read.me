üß© 1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º (Selection Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ.
–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –º–∞—Å—Å–∏–≤–∞, –∞ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.

‚∏ª

–ö–æ–¥ (C++)

#include <iostream>
#include <vector>
using namespace std;

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex])
                minIndex = j;
        }
        if (minIndex != i)
            swap(arr[i], arr[minIndex]);
    }
}

void printArray(const vector<int>& arr) {
    for (int num : arr)
        cout << num << " ";
    cout << endl;
}

int main() {
    vector<int> arr = {29, 10, 14, 37, 13};
    cout << "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    printArray(arr);

    selectionSort(arr);

    cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    printArray(arr);
    return 0;
}


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–µ –æ–±–ª–∞—Å—Ç–∏:
 ‚Ä¢ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é (—Å–ª–µ–≤–∞);
 ‚Ä¢ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é (—Å–ø—Ä–∞–≤–∞).
–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –∏—â–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –º–µ–Ω—è–µ—Ç—Å—è –º–µ—Å—Ç–∞–º–∏ —Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [29, 10, 14, 37, 13]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [10, 13, 14, 29, 37]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)


üß© 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–±–º–µ–Ω–æ–º (Bubble Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–±–º–µ–Ω–æ–º, –∏–ª–∏ –ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –º–∞—Å—Å–∏–≤—É, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –º–µ–Ω—è—è –∏—Ö –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.
–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äú–≤—Å–ø–ª—ã–≤–∞—é—Ç‚Äù –∫ –∫–æ–Ω—Ü—É –º–∞—Å—Å–∏–≤–∞, –∫–∞–∫ –ø—É–∑—ã—Ä–∏.

‚∏ª

–ö–æ–¥ (Python)

def bubble_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        swapped = False
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        if not swapped:
            break  # –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    numbers = [5, 1, 4, 2, 8]
    print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:", numbers)
    bubble_sort(numbers)
    print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤:", numbers)


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–∞—Ä—ã —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –º–µ–Ω—è–µ—Ç –∏—Ö –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –ª–µ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–≤–æ–≥–æ.
–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –º–∞—Å—Å–∏–≤–∞, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [5, 1, 4, 2, 8]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [1, 2, 4, 5, 8]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n) (–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)


üß© 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ (Insertion Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –≤—Å—Ç–∞–≤–ª—è—è –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ —É–∂–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö.
–ü—Ä–∏–Ω—Ü–∏–ø –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ.

‚∏ª

–ö–æ–¥ (Python)

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1

        # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1

        arr[j + 1] = key

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    numbers = [12, 11, 13, 5, 6]
    print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:", numbers)
    insertion_sort(numbers)
    print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤:", numbers)


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
–û–Ω —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏, –∏ –µ—Å–ª–∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ ‚Äî –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤–ª–µ–≤–æ, –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç–∞–Ω–µ—Ç –Ω–∞ —Å–≤–æ—ë –º–µ—Å—Ç–æ.
–¢–∞–∫ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –º–∞—Å—Å–∏–≤–∞.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [12, 11, 13, 5, 6]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [5, 6, 11, 12, 13]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)



üß© 4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º (Merge Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ ‚Äú—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π‚Äù.
–û–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —á–∞—Å—Ç–∏, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö, –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.

‚∏ª

–ö–æ–¥ (C++)

#include <iostream>
#include <vector>
using namespace std;

void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    vector<int> arr = {38, 27, 43, 3, 9, 82, 10};
    cout << "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    for (int x : arr) cout << x << " ";
    cout << endl;

    mergeSort(arr, 0, arr.size() - 1);

    cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    for (int x : arr) cout << x << " ";
    cout << endl;

    return 0;
}


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ú–∞—Å—Å–∏–≤ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
–ó–∞—Ç–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ merge, –∫–æ—Ç–æ—Ä–∞—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–ª–∏–≤–∞–µ—Ç –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [38, 27, 43, 3, 9, 82, 10]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [3, 9, 10, 27, 38, 43, 82]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n log n)


üß© 5. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –®–µ–ª–ª–∞ (Shell Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –®–µ–ª–ª–∞ ‚Äî —ç—Ç–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏.
–í–º–µ—Å—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ (gap), –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞—è —ç—Ç–æ—Ç —à–∞–≥, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥—ë—Ç –¥–æ –æ–±—ã—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏ –ø—Ä–∏ gap = 1.

‚∏ª

–ö–æ–¥ (Python)

def shell_sort(arr):
    n = len(arr)
    gap = n // 2  # –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥

    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i

            # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —à–∞–≥–æ–º gap
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp

        gap //= 2  # —É–º–µ–Ω—å—à–∞–µ–º —à–∞–≥

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    data = [12, 34, 54, 2, 3]
    print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:", data)
    shell_sort(data)
    print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤:", data)


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —à–∞–≥–æ–º gap, –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –º–µ—Ç–æ–¥–æ–º –≤—Å—Ç–∞–≤–∫–∏.
–° –∫–∞–∂–¥—ã–º –ø—Ä–æ—Ö–æ–¥–æ–º —à–∞–≥ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, —á—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç ‚Äú—Å–±–ª–∏–∂–µ–Ω–∏–µ‚Äù —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫ —Å–≤–æ–∏–º –ø–æ–∑–∏—Ü–∏—è–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [12, 34, 54, 2, 3]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [2, 3, 12, 34, 54]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: ‚âà O(n^1.5)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)


üß© 6. –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Quick Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É ‚Äú—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π‚Äù: –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (pivot), –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—å—à–µ –∏ –±–æ–ª—å—à–µ –Ω–µ–≥–æ, –∞ –∑–∞—Ç–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±–µ —á–∞—Å—Ç–∏.

‚∏ª

–ö–æ–¥ (C++)

#include <iostream>
#include <vector>
using namespace std;

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(const vector<int>& arr) {
    for (int x : arr) cout << x << " ";
    cout << endl;
}

int main() {
    vector<int> arr = {10, 7, 8, 9, 1, 5};
    cout << "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    printArray(arr);

    quickSort(arr, 0, arr.size() - 1);

    cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    printArray(arr);
    return 0;
}


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ú–∞—Å—Å–∏–≤ –¥–µ–ª–∏—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏:
‚Äî –ª–µ–≤–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—å—à–µ pivot,
‚Äî –ø—Ä–∞–≤–∞—è ‚Äî –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–µ.
–û–±–µ —á–∞—Å—Ç–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [10, 7, 8, 9, 1, 5]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [1, 5, 7, 8, 9, 10]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)


üß© 7. –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Heap Sort)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–∏–ª–∏ Heap Sort) ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö ‚Äú–¥–≤–æ–∏—á–Ω–∞—è –∫—É—á–∞‚Äù (heap).
–°–Ω–∞—á–∞–ª–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è max-–∫—É—á–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ —Å–≤–æ–∏—Ö –ø–æ—Ç–æ–º–∫–æ–≤, –∞ –∑–∞—Ç–µ–º –∏–∑ –Ω–µ—ë –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

‚∏ª

–ö–æ–¥ (C++)

#include <iostream>
#include <vector>
using namespace std;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –∫—É—á–∏
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;       
    int left = 2 * i + 1;  
    int right = 2 * i + 2; 

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ max-heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—É—á–∏
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]); // –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ—Ä–µ–Ω—å –≤ –∫–æ–Ω–µ—Ü
        heapify(arr, i, 0);   // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –∫—É—á–∏
    }
}

void printArray(const vector<int>& arr) {
    for (int num : arr) cout << num << " ";
    cout << endl;
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};

    cout << "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    printArray(arr);

    heapSort(arr);

    cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    printArray(arr);
    return 0;
}


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ
 1. –°–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è max-–∫—É—á–∞, —á—Ç–æ–±—ã –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ –æ–∫–∞–∑–∞–ª—Å—è —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —ç–ª–µ–º–µ–Ω—Ç.
 2. –ó–∞—Ç–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.
 3. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä –∫—É—á–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –∞ –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.
 4. –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [12, 11, 13, 5, 6, 7]
–ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [5, 6, 7, 11, 12, 13]

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n log n)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n log n)


üß© 8. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (Linear Search)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π (–ª–∏–Ω–µ–π–Ω—ã–π) –ø–æ–∏—Å–∫ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë—Ç –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞.

‚∏ª

–ö–æ–¥ (Python)

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    return -1  # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    numbers = [4, 2, 7, 1, 9, 5]
    x = 7
    result = linear_search(numbers, x)
    if result != -1:
        print(f"–≠–ª–µ–º–µ–Ω—Ç {x} –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {result}")
    else:
        print(f"–≠–ª–µ–º–µ–Ω—Ç {x} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
–µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å–∫–æ–º—ã–º ‚Äî –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è;
–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥—ë—Ç –¥–æ –∫–æ–Ω—Ü–∞.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ú–∞—Å—Å–∏–≤: [4, 2, 7, 1, 9, 5], –ø–æ–∏—Å–∫ —á–∏—Å–ª–∞ 7 ‚Üí –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 2.

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(1) ‚Äî —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —Å—Ä–∞–∑—É.
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n/2) ‚âà O(n).
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n) ‚Äî —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.


üß© 9. –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (Binary Search)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ‚Äî —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
–û–Ω –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –¥–µ–ª–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –ø–æ–ø–æ–ª–∞–º, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.

‚∏ª

–ö–æ–¥ (C++)

#include <iostream>
#include <vector>
using namespace std;

int binarySearch(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}

int main() {
    vector<int> data = {2, 4, 6, 8, 10, 12, 14};
    int x = 10;

    int result = binarySearch(data, x);
    if (result != -1)
        cout << "–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: " << result << endl;
    else
        cout << "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω." << endl;

    return 0;
}


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ê–ª–≥–æ—Ä–∏—Ç–º –∏—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –∫–∞–∂–¥—ã–π —Ä–∞–∑ —É–º–µ–Ω—å—à–∞—è –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –≤ –¥–≤–∞ —Ä–∞–∑–∞.
–ï—Å–ª–∏ –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ, –∏–Ω–∞—á–µ ‚Äî –≤ –ø—Ä–∞–≤–æ–π.
–¢–∞–∫ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∑–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ú–∞—Å—Å–∏–≤: [2, 4, 6, 8, 10, 12, 14], –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç: 10
‚Üí –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 4.

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(1)
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(log n)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(log n)


üß© 10. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (Interpolation Search)

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ ‚Äî —ç—Ç–æ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π.
–•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

‚∏ª

–ö–æ–¥ (Python)

def interpolation_search(arr, target):
    low, high = 0, len(arr) - 1

    while low <= high and target >= arr[low] and target <= arr[high]:
        if low == high:
            if arr[low] == target:
                return low
            return -1

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        pos = low + int(((target - arr[low]) * (high - low)) / (arr[high] - arr[low]))

        if arr[pos] == target:
            return pos
        elif arr[pos] < target:
            low = pos + 1
        else:
            high = pos - 1
    return -1

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    data = [10, 20, 30, 40, 50, 60, 70, 80]
    x = 60
    result = interpolation_search(data, x)
    if result != -1:
        print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {result}")
    else:
        print("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ

–í–º–µ—Å—Ç–æ –¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–ø–æ–ª–∞–º, –∫–∞–∫ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ,
–∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞, –∏—Å—Ö–æ–¥—è –∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–∞.
–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –ø–æ–∏—Å–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±—ã—Å—Ç—Ä–µ–µ.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ú–∞—Å—Å–∏–≤: [10, 20, 30, 40, 50, 60, 70, 80], –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç: 60
‚Üí –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 5.

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(log log n)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n)

üß© 11. –ü–æ–∏—Å–∫ –§–∏–±–æ–Ω–∞—á—á–∏ (Fibonacci Search)

‚∏ª

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

–ü–æ–∏—Å–∫ –§–∏–±–æ–Ω–∞—á—á–∏ ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –ø–æ–¥–º–∞—Å—Å–∏–≤–∞, –≥–¥–µ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
–û–Ω —Å—Ö–æ–∂ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ —É–¥–æ–±–Ω—ã–º –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ª–µ–Ω—Ç–µ).

‚∏ª

–ö–æ–¥ (Python)

def fibonacci_search(arr, target):
    n = len(arr)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    fibMMm2 = 0  # (m-2)'–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
    fibMMm1 = 1  # (m-1)'–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
    fibM = fibMMm1 + fibMMm2  # m'–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏

    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ >= n
    while fibM < n:
        fibMMm2 = fibMMm1
        fibMMm1 = fibM
        fibM = fibMMm1 + fibMMm2

    offset = -1  # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞

    # –ü–æ–∏—Å–∫
    while fibM > 1:
        i = min(offset + fibMMm2, n - 1)

        if arr[i] < target:
            fibM = fibMMm1
            fibMMm1 = fibMMm2
            fibMMm2 = fibM - fibMMm1
            offset = i
        elif arr[i] > target:
            fibM = fibMMm2
            fibMMm1 = fibMMm1 - fibMMm2
            fibMMm2 = fibM - fibMMm1
        else:
            return i  # —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if fibMMm1 and offset + 1 < n and arr[offset + 1] == target:
        return offset + 1

    return -1


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    data = [10, 22, 35, 40, 45, 50, 80, 85, 90, 100]
    x = 85
    index = fibonacci_search(data, x)

    if index != -1:
        print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {index}")
    else:
        print("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


‚∏ª

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ
 1. –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–∏—Ä–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏, –±–æ–ª—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –¥–ª–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞.
 2. –° –ø–æ–º–æ—â—å—é —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ.
 3. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏.
 4. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—Å—è –¥–æ –Ω—É–ª—è.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–ú–∞—Å—Å–∏–≤: [10, 22, 35, 40, 45, 50, 80, 85, 90, 100], –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 85
‚Üí –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 7.

‚∏ª

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
 ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(log n)
 ‚Ä¢ –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(log n)
 ‚Ä¢ –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(1)
