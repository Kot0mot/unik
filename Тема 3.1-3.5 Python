
def bubble_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        swapped = False
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        if not swapped:
            break  # массив уже отсортирован

# Пример использования
if __name__ == "__main__":
    numbers = [5, 1, 4, 2, 8]
    print("Исходный массив:", numbers)
    bubble_sort(numbers)
    print("Отсортированный массив:", numbers)


def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1

        # Сдвигаем элементы, которые больше текущего
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1

        arr[j + 1] = key

# Пример использования
if __name__ == "__main__":
    numbers = [12, 11, 13, 5, 6]
    print("Исходный массив:", numbers)
    insertion_sort(numbers)
    print("Отсортированный массив:", numbers)


def shell_sort(arr):
    n = len(arr)
    gap = n // 2  # начальный шаг

    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i

            # сортировка подмножеств элементов с шагом gap
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp

        gap //= 2  # уменьшаем шаг

# Пример использования
if __name__ == "__main__":
    data = [12, 34, 54, 2, 3]
    print("Исходный массив:", data)
    shell_sort(data)
    print("Отсортированный массив:", data)


def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  # возвращаем индекс найденного элемента
    return -1  # если элемент не найден

# Пример использования
if __name__ == "__main__":
    numbers = [4, 2, 7, 1, 9, 5]
    x = 7
    result = linear_search(numbers, x)
    if result != -1:
        print(f"Элемент {x} найден на позиции {result}")
    else:
        print(f"Элемент {x} не найден в списке")


def interpolation_search(arr, target):
    low, high = 0, len(arr) - 1

    while low <= high and target >= arr[low] and target <= arr[high]:
        if low == high:
            if arr[low] == target:
                return low
            return -1

        # Вычисляем позицию предполагаемого элемента
        pos = low + int(((target - arr[low]) * (high - low)) / (arr[high] - arr[low]))

        if arr[pos] == target:
            return pos
        elif arr[pos] < target:
            low = pos + 1
        else:
            high = pos - 1
    return -1

# Пример использования
if __name__ == "__main__":
    data = [10, 20, 30, 40, 50, 60, 70, 80]
    x = 60
    result = interpolation_search(data, x)
    if result != -1:
        print(f"Элемент найден на позиции {result}")
    else:
        print("Элемент не найден")


def fibonacci_search(arr, target):
    n = len(arr)
    
    # Инициализация чисел Фибоначчи
    fibMMm2 = 0  # (m-2)'е число Фибоначчи
    fibMMm1 = 1  # (m-1)'е число Фибоначчи
    fibM = fibMMm1 + fibMMm2  # m'ое число Фибоначчи

    # Находим минимальное число Фибоначчи >= n
    while fibM < n:
        fibMMm2 = fibMMm1
        fibMMm1 = fibM
        fibM = fibMMm1 + fibMMm2

    offset = -1  # Смещение от начала массива

    # Поиск
    while fibM > 1:
        i = min(offset + fibMMm2, n - 1)

        if arr[i] < target:
            fibM = fibMMm1
            fibMMm1 = fibMMm2
            fibMMm2 = fibM - fibMMm1
            offset = i
        elif arr[i] > target:
            fibM = fibMMm2
            fibMMm1 = fibMMm1 - fibMMm2
            fibMMm2 = fibM - fibMMm1
        else:
            return i  # элемент найден

    # Проверка последнего возможного элемента
    if fibMMm1 and offset + 1 < n and arr[offset + 1] == target:
        return offset + 1

    return -1


# Пример использования
if __name__ == "__main__":
    data = [10, 22, 35, 40, 45, 50, 80, 85, 90, 100]
    x = 85
    index = fibonacci_search(data, x)

    if index != -1:
        print(f"Элемент найден на позиции {index}")
    else:
        print("Элемент не найден")
