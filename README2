Кучи (Heaps)
Кучи — это специализированные древовидные структуры данных, удовлетворяющие свойству кучи, где родительский элемент всегда больше (max-куча) или меньше (min-куча) своих детей. Они используются для реализации очередей с приоритетом, алгоритмов сортировки (heapsort) и графовых алгоритмов (Dijkstra). Основные операции: вставка, извлечение минимума/максимума — O(log n), поиск — O(n).
Бинарная куча — полное бинарное дерево, реализуемое массивом (родитель i, дети 2i+1, 2i+2). Уровни заполнены слева направо. Особенности: простота, компактность в памяти, но не поддерживает быстрое слияние.
Биномиальная куча — набор биномиальных деревьев разного порядка (каждое с 2^k узлами). Поддерживает слияние двух куч в O(log n). Ключи в вершинах не меньше родительских. Полезна для задач с частыми объединениями.
Куча Фибоначчи — релаксированная версия биномиальной, с амортизированной сложностью O(1) для decreaseKey. Состоит из деревьев с метками для отслеживания потерь детей. Эффективна в графовых алгоритмах с уменьшением ключей, но сложна в реализации.
Преимущества куч: эффективность для приоритетных задач. Недостатки: нет быстрого поиска произвольных элементов. В Python — heapq (бинарная min-куча), в C++/Java — priority_queue/PriorityQueue (бинарные), для биномиальных/Фибоначчи — ручные реализации.

Хеш-таблицы (Hash Tables)
Хеш-таблицы — структура для хранения пар «ключ-значение» с средним O(1) доступом. Работают на основе хеш-функции, преобразующей ключ в индекс массива. Коллизии разрешаются цепочками (linked lists) или открытой адресацией (probing).
Особенности: ключи должны быть хэшируемыми (неизменяемыми), таблица ресайзится при load factor >0.7 для избежания деградации. Преимущества: быстрый поиск/вставка/удаление. Недостатки: возможны коллизии, зависимость от качества хеш-функции, неупорядоченность.
В Python — dict , в C++ — unordered_map , в Java — HashMap . Реализации учитывают типы данных, управление памятью и синхронизацию.
